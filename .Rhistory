iters = 300        # number of repeated run
for (ss in 1:iters) {
X = matrix(sample(c(-1,1), n*p,replace = T,prob = c(.5,.5)),
nrow = n)
Y = X%*%beta + rnorm(n,0,sd)
x.svd <- svd(X)
xm.svd = svd(X[,-1])
Z = Zm = cbind(X[,1], matrix(0, nr=n, nc=Kmax))
Z[,2:(Kmax+1)] = x.svd$u[,1:Kmax]    # design for CPC
Zm[,2:(Kmax+1)] = xm.svd$u[,1:Kmax]  # design for SPC
gam.k =  diag(xm.svd$d) %*% t(xm.svd$v) %*% beta[-1]
gam.bar = diag(x.svd$d) %*% t(x.svd$v) %*% beta
coefSPC.l[[ss]] = coefCPC.l[[ss]] = BiasSPC.l[[ss]] =
BiasCPC.l[[ss]] = varSPC.l[[ss]] = varCPC.l[[ss]] = rep(NA,Kmax)
for (k in 1:Kmax){
coefSPC.l[[ss]][k] = lm(Y~Z[,1:k]+0)$coefficients[1]
coefCPC.l[[ss]][k] = lm(Y~Zm[,1:k]+0)$coefficients[1]
BiasCPC.l[[ss]][k] = X[,1] %*% xm.svd$u[,k:min(p-1,n)] %*% gam.k[k:min(p-1,n)]/
(X[,1] %*%X[,1] - sum(( X[,1] %*% xm.svd$u[,1:k])^2))
varCPC.l[[ss]][k] = sd^2/ (X[,1] %*%X[,1] - sum(( X[,1] %*% xm.svd$u[,1:k])^2))
BiasSPC.l[[ss]][k] = -beta[1] + X[,1] %*% x.svd$u[,k:min(p,n)] %*% gam.bar[k:min(p,n)]/
(X[,1] %*%X[,1] - sum(( X[,1] %*% x.svd$u[,1:k])^2))
varSPC.l[[ss]][k] = sd^2/ (X[,1] %*%X[,1] - sum(( X[,1] %*% x.svd$u[,1:k])^2))
}
}
mat.coefSPC = matrix(unlist(coefSPC.l), ncol = iters, byrow = F)
mat.coefCPC = matrix(unlist(coefCPC.l), ncol = iters, byrow = F)
require(matrixStats)
my.coefSPC = data.frame('mean' = rowMeans(mat.coefSPC)
,'low' = rowQuantiles(mat.coefSPC,probs = 0.025)
,'high' = rowQuantiles(mat.coefSPC,probs = 0.975)
,'type' = 'PSC'
,'PCs' = 1:Kmax)
my.coefCPC = data.frame('mean' = rowMeans(mat.coefCPC)
,'low' = rowQuantiles(mat.coefCPC,probs = 0.025)
,'high'= rowQuantiles(mat.coefCPC,probs = 0.975)
,'type' = 'CPC','PCs' = 1:Kmax)
A = rbind(my.coefSPC,my.coefCPC)
require(ggplot2)
mytitle = paste('Binary X, n=',n,', p=',p,', sparse=',spa)
ggplot(data=A, aes(x=PCs, y=mean, colour=type) )+
geom_point() +   geom_line()+
ggtitle( mytitle)+
ylab(expression(beta[1] ))+ theme_bw()+
geom_ribbon(aes(ymin=A$low, ymax=A$high), linetype=2, alpha=.1)
#####################################################
######   BINARY MATRIX ##############################
#####################################################
p = 100
n = 1000
#### data generation 1: sparsity, ideal for LASSO  #########
beta = rep(0,p)
beta[1] = 1
spa = p      # nonzero
beta[2:spa] = sample(c(-1,1), spa-1,replace = T)
sd = 1         # standard deviation of the noise
X = matrix(sample(c(-1,1), n*p,replace = T,prob = c(.5,.5)),nrow = n)
Y = X%*%beta + rnorm(n,0,sd)
# try with lasso
require(glmnet)
lasso.fit <- cv.glmnet(X,Y,intercept=F)
head(coef(lasso.fit )[-1] )
beta[1:6]
#########################################3
####  simulate many times ###############
coefSPC.l = coefCPC.l = BiasSPC.l =
BiasCPC.l = varSPC.l = varCPC.l = list()
Kmax = 30
iters = 300        # number of repeated run
for (ss in 1:iters) {
X = matrix(sample(c(-1,1), n*p,replace = T,prob = c(.5,.5)),
nrow = n)
Y = X%*%beta + rnorm(n,0,sd)
x.svd <- svd(X)
xm.svd = svd(X[,-1])
Z = Zm = cbind(X[,1], matrix(0, nr=n, nc=Kmax))
Z[,2:(Kmax+1)] = x.svd$u[,1:Kmax]    # design for CPC
Zm[,2:(Kmax+1)] = xm.svd$u[,1:Kmax]  # design for SPC
gam.k =  diag(xm.svd$d) %*% t(xm.svd$v) %*% beta[-1]
gam.bar = diag(x.svd$d) %*% t(x.svd$v) %*% beta
coefSPC.l[[ss]] = coefCPC.l[[ss]] = BiasSPC.l[[ss]] =
BiasCPC.l[[ss]] = varSPC.l[[ss]] = varCPC.l[[ss]] = rep(NA,Kmax)
for (k in 1:Kmax){
coefSPC.l[[ss]][k] = lm(Y~Z[,1:k]+0)$coefficients[1]
coefCPC.l[[ss]][k] = lm(Y~Zm[,1:k]+0)$coefficients[1]
BiasCPC.l[[ss]][k] = X[,1] %*% xm.svd$u[,k:min(p-1,n)] %*% gam.k[k:min(p-1,n)]/
(X[,1] %*%X[,1] - sum(( X[,1] %*% xm.svd$u[,1:k])^2))
varCPC.l[[ss]][k] = sd^2/ (X[,1] %*%X[,1] - sum(( X[,1] %*% xm.svd$u[,1:k])^2))
BiasSPC.l[[ss]][k] = -beta[1] + X[,1] %*% x.svd$u[,k:min(p,n)] %*% gam.bar[k:min(p,n)]/
(X[,1] %*%X[,1] - sum(( X[,1] %*% x.svd$u[,1:k])^2))
varSPC.l[[ss]][k] = sd^2/ (X[,1] %*%X[,1] - sum(( X[,1] %*% x.svd$u[,1:k])^2))
}
}
mat.coefSPC = matrix(unlist(coefSPC.l), ncol = iters, byrow = F)
mat.coefCPC = matrix(unlist(coefCPC.l), ncol = iters, byrow = F)
require(matrixStats)
my.coefSPC = data.frame('mean' = rowMeans(mat.coefSPC)
,'low' = rowQuantiles(mat.coefSPC,probs = 0.025)
,'high' = rowQuantiles(mat.coefSPC,probs = 0.975)
,'type' = 'PSC'
,'PCs' = 1:Kmax)
my.coefCPC = data.frame('mean' = rowMeans(mat.coefCPC)
,'low' = rowQuantiles(mat.coefCPC,probs = 0.025)
,'high'= rowQuantiles(mat.coefCPC,probs = 0.975)
,'type' = 'CPC','PCs' = 1:Kmax)
A = rbind(my.coefSPC,my.coefCPC)
require(ggplot2)
mytitle = paste('Binary X, n=',n,', p=',p,', sparse=',spa)
ggplot(data=A, aes(x=PCs, y=mean, colour=type) )+
geom_point() +   geom_line()+
ggtitle( mytitle)+
ylab(expression(beta[1] ))+ theme_bw()+
geom_ribbon(aes(ymin=A$low, ymax=A$high), linetype=2, alpha=.1)
head(X)
### 1). TWO PCs, X1 IS UNCORRELATED W. X2 ####
##############################################
sigma <- function(theta=0, lambda=c(1,1)) {
cos.t <- cos(theta)
sin.t <- sin(theta)
a <- matrix(c(cos.t, sin.t, -sin.t, cos.t), ncol=2)
t(a) %*% diag(lambda) %*% a
}
library(MASS)
p <- 100    # dimensions
n1 <- 500   # First group population
n2 <- 500   # Second group population
n = n1+n2   # total sample
X <- rbind(mvrnorm(n1, c(-2,1), sigma(0, c(1/2,1)) ),
mvrnorm(n2, c(2,1), sigma(0, c(1,1/3)) ) )
eps <- 1  # Error SD should be small compared to the SDs for the blobs
X <- cbind(X, matrix(rnorm( n*(p-2),sd=eps), ncol=p-2))
fit <- prcomp(X)          # PCA
summary(fit)              # Brief summary showing two principal components
plot(fit$x[, 1:2], asp=1) # Display the first two components $
plot(X[, 1:2], asp=1,main = "data");    # Display the original data for comparison
points(X[1:n1,1:2], col="Blue") #...distinguish one of the blobs
#### data generation 1: sparsity, ideal for LASSO  #########
beta = rep(0,p)
beta[1] = 1
spa = 20      # nonzero
beta[2:spa] = sample(c(-1,1), spa-1,replace = T)
sd = 1         # standard deviation of the noise
Y = X%*%beta + rnorm(n,0,sd)
# try with lasso
require(glmnet)
lasso.fit <- cv.glmnet(X,Y,intercept=F)
head(coef(lasso.fit )[-1] )
beta[1:6]
######################################################
####  simulate many times ###############
coefSPC.l = coefCPC.l = BiasSPC.l =
BiasCPC.l = varSPC.l = varCPC.l = list()
Kmax = 30
iters = 300        # number of repeated run
for (ss in 1:iters) {
X <- rbind(mvrnorm(n1, c(-2,1), sigma(0, c(1/2,1)) ),
mvrnorm(n2, c(2,1), sigma(0, c(1,1/3)) ) )
X <- cbind(X, matrix(rnorm( n*(p-2),sd = eps), ncol= p-2))
x.svd <- svd(X)
xm.svd = svd(X[,-1])
Z = Zm = cbind(X[,1], matrix(0, nr=n, nc=Kmax))
Z[,2:(Kmax+1)] = x.svd$u[,1:Kmax]
Zm[,2:(Kmax+1)] = xm.svd$u[,1:Kmax]
gam.k =  diag(xm.svd$d) %*% t(xm.svd$v) %*% beta[-1]
gam.bar = diag(x.svd$d) %*% t(x.svd$v) %*% beta
coefSPC.l[[ss]] = coefCPC.l[[ss]] = BiasSPC.l[[ss]] =
BiasCPC.l[[ss]] = varSPC.l[[ss]] = varCPC.l[[ss]] = rep(NA,Kmax)
for (k in 1:Kmax){
coefSPC.l[[ss]][k] = lm(Y~Z[,1:k]+0)$coefficients[1]
coefCPC.l[[ss]][k] = lm(Y~Zm[,1:k]+0)$coefficients[1]
BiasCPC.l[[ss]][k] = X[,1] %*% xm.svd$u[,k:min(p-1,n)] %*% gam.k[k:min(p-1,n)]/
(X[,1] %*%X[,1] - sum(( X[,1] %*% xm.svd$u[,1:k])^2))
varCPC.l[[ss]][k] = sd^2/ (X[,1] %*%X[,1] - sum(( X[,1] %*% xm.svd$u[,1:k])^2))
BiasSPC.l[[ss]][k] = -beta[1] + X[,1] %*% x.svd$u[,k:min(p,n)] %*% gam.bar[k:min(p,n)]/
(X[,1] %*%X[,1] - sum(( X[,1] %*% x.svd$u[,1:k])^2))
varSPC.l[[ss]][k] = sd^2/ (X[,1] %*%X[,1] - sum(( X[,1] %*% x.svd$u[,1:k])^2))
}
}
mat.coefSPC = matrix(unlist(coefSPC.l), ncol = iters, byrow = F)
mat.coefCPC = matrix(unlist(coefCPC.l), ncol = iters, byrow = F)
require(matrixStats)
my.coefSPC = data.frame('mean' = rowMeans(mat.coefSPC)
,'low' = rowQuantiles(mat.coefSPC,probs = 0.025)
,'high' = rowQuantiles(mat.coefSPC,probs = 0.975)
,'type' = 'PSC'
,'PCs' = 1:Kmax)
my.coefCPC = data.frame('mean' = rowMeans(mat.coefCPC)
,'low' = rowQuantiles(mat.coefCPC,probs = 0.025)
,'high'= rowQuantiles(mat.coefCPC,probs = 0.975)
,'type' = 'CPC','PCs' = 1:Kmax)
A = rbind(my.coefSPC,my.coefCPC)
require(ggplot2)
mytitle = paste('Structured X, n=',n,', p=',p,', sparse=',spa)
ggplot(data=A, aes(x=PCs, y=mean, colour=type) )+
geom_point() +   geom_line()+
ggtitle( mytitle)+
ylab(expression(beta[1] ))+ theme_bw()+
geom_ribbon(aes(ymin=A$low, ymax=A$high), linetype=2, alpha=.1)
p <- 1000    # dimensions
n1 <- 300   # First group population
n2 <- 300   # Second group population
n = n1+n2   # total sample
X <- rbind(mvrnorm(n1, c(-2,1), sigma(0, c(1/2,1)) ),
mvrnorm(n2, c(2,1), sigma(0, c(1,1/3)) ) )
eps <- 1  # Error SD should be small compared to the SDs for the blobs
X <- cbind(X, matrix(rnorm( n*(p-2),sd=eps), ncol=p-2))
fit <- prcomp(X)          # PCA
summary(fit)              # Brief summary showing two principal components
plot(fit$x[, 1:2], asp=1) # Display the first two components $
plot(X[, 1:2], asp=1,main = "data");    # Display the original data for comparison
points(X[1:n1,1:2], col="Blue") #...distinguish one of the blobs
#### data generation 1: sparsity, ideal for LASSO  #########
beta = rep(0,p)
beta[1] = 1
spa = 20      # nonzero
beta[2:spa] = sample(c(-1,1), spa-1,replace = T)
sd = 1         # standard deviation of the noise
Y = X%*%beta + rnorm(n,0,sd)
# try with lasso
require(glmnet)
lasso.fit <- cv.glmnet(X,Y,intercept=F)
head(coef(lasso.fit )[-1] )
beta[1:6]
######################################################
####  simulate many times ###############
coefSPC.l = coefCPC.l = BiasSPC.l =
BiasCPC.l = varSPC.l = varCPC.l = list()
Kmax = 30
iters = 300        # number of repeated run
for (ss in 1:iters) {
X <- rbind(mvrnorm(n1, c(-2,1), sigma(0, c(1/2,1)) ),
mvrnorm(n2, c(2,1), sigma(0, c(1,1/3)) ) )
X <- cbind(X, matrix(rnorm( n*(p-2),sd = eps), ncol= p-2))
x.svd <- svd(X)
xm.svd = svd(X[,-1])
Z = Zm = cbind(X[,1], matrix(0, nr=n, nc=Kmax))
Z[,2:(Kmax+1)] = x.svd$u[,1:Kmax]
Zm[,2:(Kmax+1)] = xm.svd$u[,1:Kmax]
gam.k =  diag(xm.svd$d) %*% t(xm.svd$v) %*% beta[-1]
gam.bar = diag(x.svd$d) %*% t(x.svd$v) %*% beta
coefSPC.l[[ss]] = coefCPC.l[[ss]] = BiasSPC.l[[ss]] =
BiasCPC.l[[ss]] = varSPC.l[[ss]] = varCPC.l[[ss]] = rep(NA,Kmax)
for (k in 1:Kmax){
coefSPC.l[[ss]][k] = lm(Y~Z[,1:k]+0)$coefficients[1]
coefCPC.l[[ss]][k] = lm(Y~Zm[,1:k]+0)$coefficients[1]
BiasCPC.l[[ss]][k] = X[,1] %*% xm.svd$u[,k:min(p-1,n)] %*% gam.k[k:min(p-1,n)]/
(X[,1] %*%X[,1] - sum(( X[,1] %*% xm.svd$u[,1:k])^2))
varCPC.l[[ss]][k] = sd^2/ (X[,1] %*%X[,1] - sum(( X[,1] %*% xm.svd$u[,1:k])^2))
BiasSPC.l[[ss]][k] = -beta[1] + X[,1] %*% x.svd$u[,k:min(p,n)] %*% gam.bar[k:min(p,n)]/
(X[,1] %*%X[,1] - sum(( X[,1] %*% x.svd$u[,1:k])^2))
varSPC.l[[ss]][k] = sd^2/ (X[,1] %*%X[,1] - sum(( X[,1] %*% x.svd$u[,1:k])^2))
}
}
mat.coefSPC = matrix(unlist(coefSPC.l), ncol = iters, byrow = F)
mat.coefCPC = matrix(unlist(coefCPC.l), ncol = iters, byrow = F)
require(matrixStats)
my.coefSPC = data.frame('mean' = rowMeans(mat.coefSPC)
,'low' = rowQuantiles(mat.coefSPC,probs = 0.025)
,'high' = rowQuantiles(mat.coefSPC,probs = 0.975)
,'type' = 'PSC'
,'PCs' = 1:Kmax)
my.coefCPC = data.frame('mean' = rowMeans(mat.coefCPC)
,'low' = rowQuantiles(mat.coefCPC,probs = 0.025)
,'high'= rowQuantiles(mat.coefCPC,probs = 0.975)
,'type' = 'CPC','PCs' = 1:Kmax)
A = rbind(my.coefSPC,my.coefCPC)
require(ggplot2)
mytitle = paste('Structured X, n=',n,', p=',p,', sparse=',spa)
ggplot(data=A, aes(x=PCs, y=mean, colour=type) )+
geom_point() +   geom_line()+
ggtitle( mytitle)+
ylab(expression(beta[1] ))+ theme_bw()+
geom_ribbon(aes(ymin=A$low, ymax=A$high), linetype=2, alpha=.1)
#################################################################
### all variables are correlated ####
##############################################
p = 100
#################################################################
### all variables are correlated ####
##############################################
p = 100
n = 1000
# generate covariance matrix  #rho.x = 0.1
S = matrix(0, nrow = p, ncol = p)
for (i in 1:(p-1)){
for (j in (i+1):p){
S[i, j] = 0.5^abs(i - j)
}
}
S = S + t(S)
diag(S) = 1
out = eigen(S, symmetric = TRUE)
S.sqrt = out$vectors %*% diag(out$values^0.5) %*% t(out$vectors)
#### data generation 1: sparsity, ideal for LASSO  #########
beta = rep(0,p)
beta[1] = 1
spa = 20     # nonzero
beta[2:spa] = sample(c(-1,1), spa-1,replace = T)
sd = 1         # standard deviation of the noise
X = matrix( rnorm(n*p), nr=n) %*% S.sqrt
Y = X%*%beta + rnorm(n,0,sd)
# try with lasso
require(glmnet)
lasso.fit <- cv.glmnet(X,Y,intercept=F)
head(coef(lasso.fit )[-1] )
beta[1:6]
#########################################3
####  simulate many times ###############
coefSPC.l = coefCPC.l = BiasSPC.l =
BiasCPC.l = varSPC.l = varCPC.l = list()
iters = 300        # number of repeated run
Kmax = 30
for (ss in 1:iters) {
X = matrix(rnorm(n*p),nrow = n)%*% S.sqrt
Y = X%*%beta + rnorm(n,0,sd)
x.svd <- svd(X)
xm.svd = svd(X[,-1])
Z = Zm = cbind(X[,1], matrix(0, nr=n, nc=Kmax))
Z[,2:(Kmax+1)] = x.svd$u[,1:Kmax]    # design for CPC
Zm[,2:(Kmax+1)] = xm.svd$u[,1:Kmax]  # design for SPC
gam.k =  diag(xm.svd$d) %*% t(xm.svd$v) %*% beta[-1]
gam.bar = diag(x.svd$d) %*% t(x.svd$v) %*% beta
coefSPC.l[[ss]] = coefCPC.l[[ss]] = BiasSPC.l[[ss]] =
BiasCPC.l[[ss]] = varSPC.l[[ss]] = varCPC.l[[ss]] = rep(NA,Kmax)
for (k in 1:Kmax){
coefSPC.l[[ss]][k] = lm(Y~Z[,1:k]+0)$coefficients[1]
coefCPC.l[[ss]][k] = lm(Y~Zm[,1:k]+0)$coefficients[1]
BiasCPC.l[[ss]][k] = X[,1] %*% xm.svd$u[,k:min(p-1,n)] %*% gam.k[k:min(p-1,n)]/
(X[,1] %*%X[,1] - sum(( X[,1] %*% xm.svd$u[,1:k])^2))
varCPC.l[[ss]][k] = sd^2/ (X[,1] %*%X[,1] - sum(( X[,1] %*% xm.svd$u[,1:k])^2))
BiasSPC.l[[ss]][k] = -beta[1] + X[,1] %*% x.svd$u[,k:min(p,n)] %*% gam.bar[k:min(p,n)]/
(X[,1] %*%X[,1] - sum(( X[,1] %*% x.svd$u[,1:k])^2))
varSPC.l[[ss]][k] = sd^2/ (X[,1] %*%X[,1] - sum(( X[,1] %*% x.svd$u[,1:k])^2))
}
}
mat.coefSPC = matrix(unlist(coefSPC.l), ncol = iters, byrow = F)
mat.coefCPC = matrix(unlist(coefCPC.l), ncol = iters, byrow = F)
require(matrixStats)
my.coefSPC = data.frame('mean' = rowMeans(mat.coefSPC)
,'low' = rowQuantiles(mat.coefSPC,probs = 0.025)
,'high' = rowQuantiles(mat.coefSPC,probs = 0.975)
,'type' = 'PSC'
,'PCs' = 1:Kmax)
my.coefCPC = data.frame('mean' = rowMeans(mat.coefCPC)
,'low' = rowQuantiles(mat.coefCPC,probs = 0.025)
,'high'= rowQuantiles(mat.coefCPC,probs = 0.975)
,'type' = 'CPC','PCs' = 1:Kmax)
A = rbind(my.coefSPC,my.coefCPC)
require(ggplot2)
mytitle = paste('Correlated X, n=',n,', p=',p,', sparse=',spa)
ggplot(data=A, aes(x=PCs, y=mean, colour=type) )+
geom_point() +   geom_line()+
ggtitle( mytitle)+
ylab(expression(beta[1] ))+ theme_bw()+
geom_ribbon(aes(ymin=A$low, ymax=A$high), linetype=2, alpha=.1)
#################################################################
### all variables are correlated ####
##############################################
p = 1000
n = 600
# generate covariance matrix  #rho.x = 0.1
S = matrix(0, nrow = p, ncol = p)
for (i in 1:(p-1)){
for (j in (i+1):p){
S[i, j] = 0.5^abs(i - j)
}
}
S = S + t(S)
diag(S) = 1
out = eigen(S, symmetric = TRUE)
S.sqrt = out$vectors %*% diag(out$values^0.5) %*% t(out$vectors)
#### data generation 1: sparsity, ideal for LASSO  #########
beta = rep(0,p)
beta[1] = 1
spa = 20     # nonzero
beta[2:spa] = sample(c(-1,1), spa-1,replace = T)
sd = 1         # standard deviation of the noise
X = matrix( rnorm(n*p), nr=n) %*% S.sqrt
Y = X%*%beta + rnorm(n,0,sd)
# try with lasso
require(glmnet)
lasso.fit <- cv.glmnet(X,Y,intercept=F)
head(coef(lasso.fit )[-1] )
beta[1:6]
#########################################3
####  simulate many times ###############
coefSPC.l = coefCPC.l = BiasSPC.l =
BiasCPC.l = varSPC.l = varCPC.l = list()
iters = 300        # number of repeated run
Kmax = 30
for (ss in 1:iters) {
X = matrix(rnorm(n*p),nrow = n)%*% S.sqrt
Y = X%*%beta + rnorm(n,0,sd)
x.svd <- svd(X)
xm.svd = svd(X[,-1])
Z = Zm = cbind(X[,1], matrix(0, nr=n, nc=Kmax))
Z[,2:(Kmax+1)] = x.svd$u[,1:Kmax]    # design for CPC
Zm[,2:(Kmax+1)] = xm.svd$u[,1:Kmax]  # design for SPC
gam.k =  diag(xm.svd$d) %*% t(xm.svd$v) %*% beta[-1]
gam.bar = diag(x.svd$d) %*% t(x.svd$v) %*% beta
coefSPC.l[[ss]] = coefCPC.l[[ss]] = BiasSPC.l[[ss]] =
BiasCPC.l[[ss]] = varSPC.l[[ss]] = varCPC.l[[ss]] = rep(NA,Kmax)
for (k in 1:Kmax){
coefSPC.l[[ss]][k] = lm(Y~Z[,1:k]+0)$coefficients[1]
coefCPC.l[[ss]][k] = lm(Y~Zm[,1:k]+0)$coefficients[1]
BiasCPC.l[[ss]][k] = X[,1] %*% xm.svd$u[,k:min(p-1,n)] %*% gam.k[k:min(p-1,n)]/
(X[,1] %*%X[,1] - sum(( X[,1] %*% xm.svd$u[,1:k])^2))
varCPC.l[[ss]][k] = sd^2/ (X[,1] %*%X[,1] - sum(( X[,1] %*% xm.svd$u[,1:k])^2))
BiasSPC.l[[ss]][k] = -beta[1] + X[,1] %*% x.svd$u[,k:min(p,n)] %*% gam.bar[k:min(p,n)]/
(X[,1] %*%X[,1] - sum(( X[,1] %*% x.svd$u[,1:k])^2))
varSPC.l[[ss]][k] = sd^2/ (X[,1] %*%X[,1] - sum(( X[,1] %*% x.svd$u[,1:k])^2))
}
}
mat.coefSPC = matrix(unlist(coefSPC.l), ncol = iters, byrow = F)
mat.coefCPC = matrix(unlist(coefCPC.l), ncol = iters, byrow = F)
require(matrixStats)
my.coefSPC = data.frame('mean' = rowMeans(mat.coefSPC)
,'low' = rowQuantiles(mat.coefSPC,probs = 0.025)
,'high' = rowQuantiles(mat.coefSPC,probs = 0.975)
,'type' = 'PSC'
,'PCs' = 1:Kmax)
my.coefCPC = data.frame('mean' = rowMeans(mat.coefCPC)
,'low' = rowQuantiles(mat.coefCPC,probs = 0.025)
,'high'= rowQuantiles(mat.coefCPC,probs = 0.975)
,'type' = 'CPC','PCs' = 1:Kmax)
A = rbind(my.coefSPC,my.coefCPC)
require(ggplot2)
mytitle = paste('Correlated X, n=',n,', p=',p,', sparse=',spa)
ggplot(data=A, aes(x=PCs, y=mean, colour=type) )+
geom_point() +   geom_line()+
ggtitle( mytitle)+
ylab(expression(beta[1] ))+ theme_bw()+
geom_ribbon(aes(ymin=A$low, ymax=A$high), linetype=2, alpha=.1)
#################################################################
### all variables are correlated ####
##############################################
p = 1000
n = 600
# generate covariance matrix  #rho.x = 0.1
S = matrix(0, nrow = p, ncol = p)
for (i in 1:(p-1)){
for (j in (i+1):p){
S[i, j] = 0.5^abs(i - j)
}
}
S = S + t(S)
diag(S) = 1
out = eigen(S, symmetric = TRUE)
S.sqrt = out$vectors %*% diag(out$values^0.5) %*% t(out$vectors)
#### data generation 1: sparsity, ideal for LASSO  #########
beta = rep(0,p)
beta[1] = 1
spa = 800     # nonzero
beta[2:spa] = sample(c(-1,1), spa-1,replace = T)
sd = 1         # standard deviation of the noise
X = matrix( rnorm(n*p), nr=n) %*% S.sqrt
Y = X%*%beta + rnorm(n,0,sd)
# try with lasso
require(glmnet)
lasso.fit <- cv.glmnet(X,Y,intercept=F)
head(coef(lasso.fit )[-1] )
beta[1:6]
#########################################3
####  simulate many times ###############
coefSPC.l = coefCPC.l = BiasSPC.l =
BiasCPC.l = varSPC.l = varCPC.l = list()
iters = 300        # number of repeated run
Kmax = 30
for (ss in 1:iters) {
X = matrix(rnorm(n*p),nrow = n)%*% S.sqrt
Y = X%*%beta + rnorm(n,0,sd)
x.svd <- svd(X)
xm.svd = svd(X[,-1])
Z = Zm = cbind(X[,1], matrix(0, nr=n, nc=Kmax))
Z[,2:(Kmax+1)] = x.svd$u[,1:Kmax]    # design for CPC
Zm[,2:(Kmax+1)] = xm.svd$u[,1:Kmax]  # design for SPC
gam.k =  diag(xm.svd$d) %*% t(xm.svd$v) %*% beta[-1]
gam.bar = diag(x.svd$d) %*% t(x.svd$v) %*% beta
coefSPC.l[[ss]] = coefCPC.l[[ss]] = BiasSPC.l[[ss]] =
BiasCPC.l[[ss]] = varSPC.l[[ss]] = varCPC.l[[ss]] = rep(NA,Kmax)
for (k in 1:Kmax){
coefSPC.l[[ss]][k] = lm(Y~Z[,1:k]+0)$coefficients[1]
coefCPC.l[[ss]][k] = lm(Y~Zm[,1:k]+0)$coefficients[1]
BiasCPC.l[[ss]][k] = X[,1] %*% xm.svd$u[,k:min(p-1,n)] %*% gam.k[k:min(p-1,n)]/
(X[,1] %*%X[,1] - sum(( X[,1] %*% xm.svd$u[,1:k])^2))
varCPC.l[[ss]][k] = sd^2/ (X[,1] %*%X[,1] - sum(( X[,1] %*% xm.svd$u[,1:k])^2))
BiasSPC.l[[ss]][k] = -beta[1] + X[,1] %*% x.svd$u[,k:min(p,n)] %*% gam.bar[k:min(p,n)]/
(X[,1] %*%X[,1] - sum(( X[,1] %*% x.svd$u[,1:k])^2))
varSPC.l[[ss]][k] = sd^2/ (X[,1] %*%X[,1] - sum(( X[,1] %*% x.svd$u[,1:k])^2))
}
}
mat.coefSPC = matrix(unlist(coefSPC.l), ncol = iters, byrow = F)
mat.coefCPC = matrix(unlist(coefCPC.l), ncol = iters, byrow = F)
require(matrixStats)
my.coefSPC = data.frame('mean' = rowMeans(mat.coefSPC)
,'low' = rowQuantiles(mat.coefSPC,probs = 0.025)
,'high' = rowQuantiles(mat.coefSPC,probs = 0.975)
,'type' = 'PSC'
,'PCs' = 1:Kmax)
my.coefCPC = data.frame('mean' = rowMeans(mat.coefCPC)
,'low' = rowQuantiles(mat.coefCPC,probs = 0.025)
,'high'= rowQuantiles(mat.coefCPC,probs = 0.975)
,'type' = 'CPC','PCs' = 1:Kmax)
A = rbind(my.coefSPC,my.coefCPC)
require(ggplot2)
mytitle = paste('Correlated X, n=',n,', p=',p,', sparse=',spa)
ggplot(data=A, aes(x=PCs, y=mean, colour=type) )+
geom_point() +   geom_line()+
ggtitle( mytitle)+
ylab(expression(beta[1] ))+ theme_bw()+
geom_ribbon(aes(ymin=A$low, ymax=A$high), linetype=2, alpha=.1)
setwd("C:/Users/thetm/Dropbox/ongoing_works/Coheritablity in LM/R codes/coher")
